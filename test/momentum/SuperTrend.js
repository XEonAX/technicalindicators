"use strict"

const assert = require('assert');
const SuperTrend = require('../../lib/momentum/SuperTrend').SuperTrend;

let c = [11945.01,11754.31,11853.55,11531.34,11662.96,11648.13,11748.2,11318.42,11461.43,11330.38,11526.91,11465.84,11711.16,11649.51,11921.97,11388.54,10140.85,10446.25,10166.69,10256.2,10373.44,10126.65,10219.2,10336.87,10387.89,10440.92,10332.83,10671.77,10785.31,10954.01,10939.99,10933.39,11080.65,10920.28,10417.22,10529.61,10241.46,10736.32,10686.67,10728.6,10774.25,10696.12,10840.48,10776.59,10619.13,10570.4,10542.06,10666.63,10792.21,10599.66,10666.39,10925.57,11050.64,11293.22,11369.02,11528.25,11420.56,11417.89,11505.12,11319.32,11360.2,11503.14,11751.47,11909.99,12780.96,12968.52,12923.07,13111.73,13028.83,13052.19,13636.17,13266.4,13455.7,13560.1,13791,13761.5,13549.37,14023.53,14144.01,15590.02,15579.92,14818.3,15475.1,15328.41,15297.21,15684.24,16291.86,16320.7,16070.45,15957,16713.57,17659.38,17776.12];
let l = [11817.93,11561,11668,11485.81,11376.81,11514.13,11585.09,11117.64,11244,11125,11276.89,11417.04,11458,11570,11515,11160.1,9960.8,9875.5,9825,9994.86,9875,9850,9981.01,10070.83,10200,10269.25,10200,10212.34,10606.48,10661.22,10745.83,10812.84,10887.37,10723,10296.35,10353,10136.82,10190.93,10556.24,10644.68,10594.82,10626,10635.87,10665.13,10437,10374,10496.46,10517.87,10615.64,10525,10546.17,10530.41,10829,11050.51,11221,11172,11300,11280,11250.83,11200,11255,11346.22,11407.96,11677.59,11886.95,12678.08,12720.08,12870,12888,12765,13019.87,12888,12920.77,13115,13411.5,13603,13195.05,13284.99,13525,14093.56,15166,14344.22,14703.88,14805.54,15072.46,15272.68,15440.64,15952.35,15670,15774.72,15864,16538,17214.45];
let h = [12387.77,12020.08,11880.01,11878,11686,11718.07,11824.9,11767.85,11539.32,11592.2,11542.65,11580.02,11719,11800.77,12050.85,11954.57,11462.6,10627.05,10565.68,10347.14,10410.75,10438,10343,10483.35,10397.6,10477.97,10580.11,10750,10930.04,11093,11045.46,11038.03,11179.79,11080.64,10988.86,10572.71,10537.15,10795.24,10760.53,10820.94,10799,10950,10867.54,10849.34,10920,10664.64,10603.56,10696.87,10798,10800,10681.87,10950,11104.64,11491,11445,11720.01,11557,11547.98,11617.34,11541.15,11402.42,11505,11823.99,12038.38,13217.68,13185,13027.69,13166.73,13350,13238.81,13789.29,13859.48,13642.91,13669.98,14100,13895,13830,14066.11,14259,15750,15960,15753.52,15650,15840,15460,15965,16340.7,16480,16326.99,16180,16880,17858.82,18476.93];
let expectResult = [10538.947,10646.575299999999,10768.421769999999,10796.903092999999,10796.903092999999,12175.424644670002,11794.092180203,11794.092180203,11726.34951596443,11703.414564367988,11703.414564367988,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11693.399047138071,11657.536540824847,11532.297386742363,11532.297386742363,11532.297386742363,11532.297386742363,11532.297386742363,11532.297386742363,11532.297386742363,11532.297386742363,11532.297386742363,11530.838174050314,11492.50635664528,11492.50635664528,11492.50635664528,11492.50635664528,11430.812639594971,11430.812639594971,11430.812639594971,11430.812639594971,11430.812639594971,10488.904676545568,10490.00970889101,10490.00970889101,10491.600264201717,10491.600264201717,10491.600264201717,10568.201777603053,10719.498599842746,10942.919239858473,11329.536815872625,11678.963634285363,11678.963634285363,11831.704443771143,11912.40549939403,11912.40549939403,12068.483754509165,12068.483754509165,12068.483754509165,12068.483754509165,12134.799957333464,12202.544961600117,12202.544961600117,12202.544961600117,12202.544961600117,12883.363124305833,13490.224811875252,13490.224811875252,13490.224811875252,13490.224811875252,13490.224811875252,13490.224811875252,13575.881192547795,13974.570073293016,13974.570073293016,13974.570073293016,14163.995838430608,14814.960254587548,15321.841229128795];

let factor = 3;
let period = 10;

let input = { high:h
            , low:l
            , close:c
            , factor:factor
            , period:period
        };


describe('SuperTrend', function() {
  "use strict";
  it('should calculate SuperTrend using the calculate method', function() {
    assert.deepEqual(SuperTrend.calculate(input), expectResult, 'Wrong Results');
  });

  it('should be able to calculate SuperTrend by using getResult', function() {
    let strend = new SuperTrend(input);
    assert.deepEqual(strend.getResult(),  expectResult, 'Wrong Results while calculating next bar');
  });


  it('should be able to get SuperTrend for the next bar using nextValue', function() {
    let myInput = Object.assign({}, input);
    myInput.high = [];
    myInput.low  = [];
    myInput.close = [];
    let strend = new SuperTrend(myInput);
    let results = [];
    input.high.forEach((price,index) => {
      let result = strend.nextValue({
        high : input.high[index],
        low  : input.low[index],
        close: input.close[index]
      });
      if(result)
        results.push(result)
    });
    assert.deepEqual(results, expectResult, 'Wrong Results while getting results');
  })

  it('should be able to calculate SuperTrend for reversed input by using calculate method', function() {
    let myInput = Object.assign({}, input);
    myInput.reversedInput = true;
    myInput.high.reverse();
    myInput.low.reverse();
    myInput.close.reverse();
    assert.deepEqual(SuperTrend.calculate(myInput),  expectResult.slice().reverse(), 'Wrong Results while calculating next bar');
  });
})